/*

A computer program (also commonly called an application) is a set of instructions that a computer can follow to perform some task.
The process of writing programs using a programming language is called programming

Programmers typically write programs by creating source code (more often just called code)

Notable hardware found on a typical computing device includes:
- Interactive devices (e.g. a monitor, touch screen, keyboard, or mouse), which allow a person to interact with a computer.
- Storage devices (e.g. a hard drive, SSD, or flash memory), which store information even when the computer is turned off.
- Memory, where computer programs are loaded prior to execution.
- A CPU (central processing unit, often called the “brain” of the computer), which actually executes the instructions.

in modern computing, programs often interact with more than just hardware -- they also interact with other software on the system (particularly the operating system). The term platform refers to a compatible set of hardware (CPU) and software (OS, browser, etc…) that provides an environment for software applications to run. For example, the term “PC” is used colloquially to mean the platform consisting of a Windows OS running on an x86-family CPU.

Machine Language

A computer’s CPU is incapable of understanding C++. Instead, CPUs are only capable of processing instructions written in machine language (or machine code). The set of all possible machine language instructions that a given CPU can understand is called an instruction set.
- A “CPU family” is formally called an “instruction set architecture”. Wikipedia has a list of different CPU families here.

Here is a sample machine language instruction: 10110000 01100001.

Each instruction is interpreted by the CPU into a command to do a very specific job, such as “compare these two numbers”, or “copy this number into that memory location”. Back when computers were first invented, programmers had to write programs directly in machine language, which was a very difficult and time-consuming thing to do.

How these instructions are organized and interpreted is beyond the scope of this tutorial series, but it is worth noting two things.

First, each instruction is composed of a sequence of 1s and 0s. Each individual 0 or 1 is called a binary digit, or bit for short. The number of bits in a machine language instruction varies -- for example, some CPUs process instructions that are always 32 bits long, whereas some other CPUs (such as those from the x86 family, which you may be using) have instructions that can be a variable length.

Second, each family of compatible CPUs (e.g. x86, Arm64) has its own machine language, and this machine language is not compatible with the machine language of other CPU families. This means machine language programs written for one CPU family cannot be run on CPUs from a different family!

Much like assembly language programs, programs written in high level languages must be translated into machine language before they can be run.
 - There are two primary ways this is done: compiling and interpreting.

C++ programs are usually compiled. 
- A compiler is a program (or collection of programs) that reads source code (typically written in a high-level language) and translates it into some other language (typically a low-level language, such as machine language or assembly (which can then be assembled into machine language)). 

- These machine language files are typically then combined into an executable file (containing machine language instructions) that can be run or distributed to others. Notably, running the executable file does not require the compiler to be installed.

High-Level Language Source Code       ->           Compiler         ->            Executable
                                  Compiled By                     Produces

Executable         ->          Hardware            ->             Program Results
                 Run On                          Produces

An Interpreter is a program that directly executes the instructions in the source code without requiring them to be compiled into an executable first.

Interpreters -  tend to be more flexible than compilers, but are less efficient when running programs because the interpreting process needs to be done every time the program is run.

*/

C++ KeyWords

alignas
alignof
and
and_eq
asm
auto
bitand
bitor
bool
break
case
catch
char
char8_t (since C++20)
char16_t
char32_t
class
compl
concept (since C++20)
const
consteval (since C++20)
constexpr
constinit (since C++20)
const_cast
continue
co_await (since C++20)
co_return (since C++20)
co_yield (since C++20)
decltype
default
delete
do
double
dynamic_cast
else
enum
explicit
export
extern
false
float
for
friend
goto
if
inline
int
long
mutable
namespace
new
noexcept
not
not_eq
nullptr
operator
or
or_eq
private
protected
public
register
reinterpret_cast
requires (since C++20)
return
short
signed
sizeof
static
static_assert
static_cast
struct
switch
template
this
thread_local
throw
true
try
typedef
typeid
typename
union
unsigned
using
virtual
void
volatile
wchar_t
while
xor
xor_eq


The C++ standard only defines the meaning of 3 status codes: 0, EXIT_SUCCESS, and EXIT_FAILURE. 0 and EXIT_SUCCESS both mean the program executed successfully. EXIT_FAILURE means the program did not execute successfully.

EXIT_SUCCESS and EXIT_FAILURE are preprocessor macros defined in the <cstdlib> header:

#include <cstdlib> // for EXIT_SUCCESS and EXIT_FAILURE

int main()
{
    return EXIT_SUCCESS;
}

Macro defines

The #define directive can be used to create a macro. In C++, a macro is a rule that defines how input text is converted into replacement output text.

There are two basic types of macros: object-like macros, and function-like macros.

Function-like macros act like functions, and serve a similar purpose. Their use is generally considered unsafe, and almost anything they can do can be done by a normal function.

One more common use of conditional compilation involves using #if 0 to exclude a block of code from being compiled (as if it were inside a comment block):


A syntax error occurs when you write a statement that is not valid according to the grammar of the C++ language. This includes errors such as missing semicolons, mismatched parentheses or braces, etc… For example, the following program contains quite a few syntax errors:

A semantic error is an error in meaning. These occur when a statement is syntactically valid, but either violates other rules of the language, or does not do what the programmer intended.


Types   Category    Meaning Example
float
double
long double Floating Point  a number with a fractional part 3.14159
bool    Integral (Boolean)  true or false   true
char
wchar_t
char8_t (C++20)
char16_t (C++11)
char32_t (C++11)    Integral (Character)    a single character of text  ‘c’
short int
int
long int
long long int (C++11)   Integral (Integer)  positive and negative whole numbers, including 0    64
std::nullptr_t (C++11)  Null Pointer    a null pointer  nullptr
void    Void    no type n/a

Boolean bool    1 byte  1 byte
Character   char    1 byte (exactly)    1 byte
wchar_t 1 byte  2 or 4 bytes
char8_t 1 byte  1 byte
char16_t    2 bytes 2 bytes
char32_t    4 bytes 4 bytes
Integral    short   2 bytes 2 bytes
int 2 bytes 4 bytes
long    4 bytes 4 or 8 bytes
long long   8 bytes 8 bytes
Floating point  float   4 bytes 4 bytes
double  8 bytes 8 bytes
long double 8 bytes 8, 12, or 16 bytes
Pointer std::nullptr_t  4 bytes 4 or 8 bytes


short int   16 bits 
int 16 bits Typically 32 bits on modern architectures
long int    32 bits 
long long int   64 bits 

Signed Integers

Defining signed integers

Here is the preferred way to define the four types of signed integers:

short s;      // prefer "short" instead of "short int"
int i;
long l;       // prefer "long" instead of "long int"
long long ll; // prefer "long long" instead of "long long int"

The integer types can also take an optional signed keyword, which by convention is typically placed before the type name:
signed short ss;
signed int si;
signed long sl;
signed long long sll;


Unsigned integers

In the previous lesson (4.4 -- Signed integers), we covered signed integers, which are a set of types that can hold positive and negative whole numbers, including 0.

C++ also supports unsigned integers. Unsigned integers are integers that can only hold non-negative whole numbers.

Defining unsigned integers

To define an unsigned integer, we use the unsigned keyword. By convention, this is placed before the type:

unsigned short us;
unsigned int ui;
unsigned long ul;
unsigned long long ull;

std::int8_t 1 byte signed   -128 to 127 Treated like a signed char on many systems. See note below.
std::uint8_t    1 byte unsigned 0 to 255    Treated like an unsigned char on many systems. See note below.
std::int16_t    2 byte signed   -32,768 to 32,767   
std::uint16_t   2 byte unsigned 0 to 65,535 
std::int32_t    4 byte signed   -2,147,483,648 to 2,147,483,647 
std::uint32_t   4 byte unsigned 0 to 4,294,967,295  
std::int64_t    8 byte signed   -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 
std::uint64_t   8 byte unsigned 0 to 18,446,744,073,709,551,615

C++ has three fundamental floating point data types: a single-precision float, a double-precision double, and an extended-precision long double. As with integers, C++ does not define the actual size of these types.

C++ Source Code -> C++ Compiler -> Object Code